/*
 * This file is generated by jOOQ.
 */
package jooq.fancy.app.tables;


import javax.annotation.Generated;

import jooq.fancy.app.Public;
import jooq.fancy.app.tables.records.StMakeemptycoverageRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StMakeemptycoverage extends TableImpl<StMakeemptycoverageRecord> {

    private static final long serialVersionUID = -1753029628;

    /**
     * The reference instance of <code>public.st_makeemptycoverage</code>
     */
    public static final StMakeemptycoverage ST_MAKEEMPTYCOVERAGE = new StMakeemptycoverage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StMakeemptycoverageRecord> getRecordType() {
        return StMakeemptycoverageRecord.class;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<StMakeemptycoverageRecord, Object> ST_MAKEEMPTYCOVERAGE_ = createField("st_makeemptycoverage", org.jooq.impl.DefaultDataType.getDefaultDataType("\"raster\""), this, "");

    /**
     * Create a <code>public.st_makeemptycoverage</code> table reference
     */
    public StMakeemptycoverage() {
        this(DSL.name("st_makeemptycoverage"), null);
    }

    /**
     * Create an aliased <code>public.st_makeemptycoverage</code> table reference
     */
    public StMakeemptycoverage(String alias) {
        this(DSL.name(alias), ST_MAKEEMPTYCOVERAGE);
    }

    /**
     * Create an aliased <code>public.st_makeemptycoverage</code> table reference
     */
    public StMakeemptycoverage(Name alias) {
        this(alias, ST_MAKEEMPTYCOVERAGE);
    }

    private StMakeemptycoverage(Name alias, Table<StMakeemptycoverageRecord> aliased) {
        this(alias, aliased, new Field[11]);
    }

    private StMakeemptycoverage(Name alias, Table<StMakeemptycoverageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> StMakeemptycoverage(Table<O> child, ForeignKey<O, StMakeemptycoverageRecord> key) {
        super(child, key, ST_MAKEEMPTYCOVERAGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StMakeemptycoverage as(String alias) {
        return new StMakeemptycoverage(DSL.name(alias), this, parameters);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StMakeemptycoverage as(Name alias) {
        return new StMakeemptycoverage(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public StMakeemptycoverage rename(String name) {
        return new StMakeemptycoverage(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public StMakeemptycoverage rename(Name name) {
        return new StMakeemptycoverage(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public StMakeemptycoverage call(Integer tilewidth, Integer tileheight, Integer width, Integer height, Double upperleftx, Double upperlefty, Double scalex, Double scaley, Double skewx, Double skewy, Integer srid) {
        return new StMakeemptycoverage(DSL.name(getName()), null, new Field[] { 
              DSL.val(tilewidth, org.jooq.impl.SQLDataType.INTEGER)
            , DSL.val(tileheight, org.jooq.impl.SQLDataType.INTEGER)
            , DSL.val(width, org.jooq.impl.SQLDataType.INTEGER)
            , DSL.val(height, org.jooq.impl.SQLDataType.INTEGER)
            , DSL.val(upperleftx, org.jooq.impl.SQLDataType.DOUBLE)
            , DSL.val(upperlefty, org.jooq.impl.SQLDataType.DOUBLE)
            , DSL.val(scalex, org.jooq.impl.SQLDataType.DOUBLE)
            , DSL.val(scaley, org.jooq.impl.SQLDataType.DOUBLE)
            , DSL.val(skewx, org.jooq.impl.SQLDataType.DOUBLE)
            , DSL.val(skewy, org.jooq.impl.SQLDataType.DOUBLE)
            , DSL.val(srid, org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)))
        });
    }

    /**
     * Call this table-valued function
     */
    public StMakeemptycoverage call(Field<Integer> tilewidth, Field<Integer> tileheight, Field<Integer> width, Field<Integer> height, Field<Double> upperleftx, Field<Double> upperlefty, Field<Double> scalex, Field<Double> scaley, Field<Double> skewx, Field<Double> skewy, Field<Integer> srid) {
        return new StMakeemptycoverage(DSL.name(getName()), null, new Field[] { 
              tilewidth
            , tileheight
            , width
            , height
            , upperleftx
            , upperlefty
            , scalex
            , scaley
            , skewx
            , skewy
            , srid
        });
    }
}
