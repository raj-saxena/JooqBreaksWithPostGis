/*
 * This file is generated by jOOQ.
 */
package jooq.fancy.app.tables;


import javax.annotation.Generated;

import jooq.fancy.app.Public;
import jooq.fancy.app.tables.records.RasterColumnsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RasterColumns extends TableImpl<RasterColumnsRecord> {

    private static final long serialVersionUID = -1848542456;

    /**
     * The reference instance of <code>public.raster_columns</code>
     */
    public static final RasterColumns RASTER_COLUMNS = new RasterColumns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RasterColumnsRecord> getRecordType() {
        return RasterColumnsRecord.class;
    }

    /**
     * The column <code>public.raster_columns.r_table_catalog</code>.
     */
    public final TableField<RasterColumnsRecord, String> R_TABLE_CATALOG = createField("r_table_catalog", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.raster_columns.r_table_schema</code>.
     */
    public final TableField<RasterColumnsRecord, String> R_TABLE_SCHEMA = createField("r_table_schema", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.raster_columns.r_table_name</code>.
     */
    public final TableField<RasterColumnsRecord, String> R_TABLE_NAME = createField("r_table_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.raster_columns.r_raster_column</code>.
     */
    public final TableField<RasterColumnsRecord, String> R_RASTER_COLUMN = createField("r_raster_column", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.raster_columns.srid</code>.
     */
    public final TableField<RasterColumnsRecord, Integer> SRID = createField("srid", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.raster_columns.scale_x</code>.
     */
    public final TableField<RasterColumnsRecord, Double> SCALE_X = createField("scale_x", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.raster_columns.scale_y</code>.
     */
    public final TableField<RasterColumnsRecord, Double> SCALE_Y = createField("scale_y", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.raster_columns.blocksize_x</code>.
     */
    public final TableField<RasterColumnsRecord, Integer> BLOCKSIZE_X = createField("blocksize_x", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.raster_columns.blocksize_y</code>.
     */
    public final TableField<RasterColumnsRecord, Integer> BLOCKSIZE_Y = createField("blocksize_y", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.raster_columns.same_alignment</code>.
     */
    public final TableField<RasterColumnsRecord, Boolean> SAME_ALIGNMENT = createField("same_alignment", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.raster_columns.regular_blocking</code>.
     */
    public final TableField<RasterColumnsRecord, Boolean> REGULAR_BLOCKING = createField("regular_blocking", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.raster_columns.num_bands</code>.
     */
    public final TableField<RasterColumnsRecord, Integer> NUM_BANDS = createField("num_bands", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.raster_columns.pixel_types</code>.
     */
    public final TableField<RasterColumnsRecord, String[]> PIXEL_TYPES = createField("pixel_types", org.jooq.impl.SQLDataType.CLOB.getArrayDataType(), this, "");

    /**
     * The column <code>public.raster_columns.nodata_values</code>.
     */
    public final TableField<RasterColumnsRecord, Double[]> NODATA_VALUES = createField("nodata_values", org.jooq.impl.SQLDataType.FLOAT.getArrayDataType(), this, "");

    /**
     * The column <code>public.raster_columns.out_db</code>.
     */
    public final TableField<RasterColumnsRecord, Boolean[]> OUT_DB = createField("out_db", org.jooq.impl.SQLDataType.BOOLEAN.getArrayDataType(), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<RasterColumnsRecord, Object> EXTENT = createField("extent", org.jooq.impl.DefaultDataType.getDefaultDataType("\"public\".\"geometry\""), this, "");

    /**
     * The column <code>public.raster_columns.spatial_index</code>.
     */
    public final TableField<RasterColumnsRecord, Boolean> SPATIAL_INDEX = createField("spatial_index", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * Create a <code>public.raster_columns</code> table reference
     */
    public RasterColumns() {
        this(DSL.name("raster_columns"), null);
    }

    /**
     * Create an aliased <code>public.raster_columns</code> table reference
     */
    public RasterColumns(String alias) {
        this(DSL.name(alias), RASTER_COLUMNS);
    }

    /**
     * Create an aliased <code>public.raster_columns</code> table reference
     */
    public RasterColumns(Name alias) {
        this(alias, RASTER_COLUMNS);
    }

    private RasterColumns(Name alias, Table<RasterColumnsRecord> aliased) {
        this(alias, aliased, null);
    }

    private RasterColumns(Name alias, Table<RasterColumnsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> RasterColumns(Table<O> child, ForeignKey<O, RasterColumnsRecord> key) {
        super(child, key, RASTER_COLUMNS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RasterColumns as(String alias) {
        return new RasterColumns(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RasterColumns as(Name alias) {
        return new RasterColumns(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RasterColumns rename(String name) {
        return new RasterColumns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RasterColumns rename(Name name) {
        return new RasterColumns(name, null);
    }
}
