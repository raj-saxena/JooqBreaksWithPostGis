/*
 * This file is generated by jOOQ.
 */
package jooq.fancy.app.udt.records;


import javax.annotation.Generated;

import jooq.fancy.app.udt.AggCount;

import org.jooq.Field;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UDTRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AggCountRecord extends UDTRecordImpl<AggCountRecord> implements Record4<Long, Integer, Boolean, Double> {

    private static final long serialVersionUID = 1613445345;

    /**
     * Setter for <code>public.agg_count.count</code>.
     */
    public AggCountRecord setCount(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.agg_count.count</code>.
     */
    public Long getCount() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.agg_count.nband</code>.
     */
    public AggCountRecord setNband(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.agg_count.nband</code>.
     */
    public Integer getNband() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.agg_count.exclude_nodata_value</code>.
     */
    public AggCountRecord setExcludeNodataValue(Boolean value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.agg_count.exclude_nodata_value</code>.
     */
    public Boolean getExcludeNodataValue() {
        return (Boolean) get(2);
    }

    /**
     * Setter for <code>public.agg_count.sample_percent</code>.
     */
    public AggCountRecord setSamplePercent(Double value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.agg_count.sample_percent</code>.
     */
    public Double getSamplePercent() {
        return (Double) get(3);
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Long, Integer, Boolean, Double> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Long, Integer, Boolean, Double> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field1() {
        return AggCount.COUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return AggCount.NBAND;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field3() {
        return AggCount.EXCLUDE_NODATA_VALUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field4() {
        return AggCount.SAMPLE_PERCENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component1() {
        return getCount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component2() {
        return getNband();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean component3() {
        return getExcludeNodataValue();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double component4() {
        return getSamplePercent();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value1() {
        return getCount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getNband();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value3() {
        return getExcludeNodataValue();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value4() {
        return getSamplePercent();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AggCountRecord value1(Long value) {
        setCount(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AggCountRecord value2(Integer value) {
        setNband(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AggCountRecord value3(Boolean value) {
        setExcludeNodataValue(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AggCountRecord value4(Double value) {
        setSamplePercent(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AggCountRecord values(Long value1, Integer value2, Boolean value3, Double value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AggCountRecord
     */
    public AggCountRecord() {
        super(AggCount.AGG_COUNT);
    }

    /**
     * Create a detached, initialised AggCountRecord
     */
    public AggCountRecord(Long count, Integer nband, Boolean excludeNodataValue, Double samplePercent) {
        super(AggCount.AGG_COUNT);

        set(0, count);
        set(1, nband);
        set(2, excludeNodataValue);
        set(3, samplePercent);
    }
}
